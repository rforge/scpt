library(devtools)
library(roxygen2)
load_all()
require(parallel)
require(RcppArmadillo)
require(splines)
require(inline)
require(Rcpp)
load_all()
load_all()
load_all()
library(scpt)
library(scpt)
library(scpt)
library(roxygen2)
library(scpt)
library(scpt)
library(scpt)
load_all()
library(scpt)
load_all()
library(scpt)
load_all()
library(devtools)
library(roxygen2)
load_all()
library(scpt)
?roxygen2
??roxygen2
oxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(scpt)
?useDynlib
?useDynLib
??useDynLib
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
load_all()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(scpt)
roxygen2::roxygenise()
library(scpt)
library(devtools)
library(roxygen2)
library(scpt)
library(scpt)
library(scpt)
library(MASS)
N=100 #sample size
M=50 #Time points
S=11 #Space points
T=seq(0,1,length=M)
reps<-10
gamma=1 #gamma belongs to (0,1]
alph=1/2  #alph belongs to (0,1]
sigm=1    # sigm^2 > 0
beta=0 # beta belongs to [0,1], for beta=0 we have separable covariance
c=1   # nonnegative scaling parameter of space
a=1   # nonnegative scaling parameter of time
taph=1 # beta*d/2 >= 0
#Generate the location points in the square with equal distance
L=1+round(sqrt(S))
x=seq(0,1,length=L)
y=seq(0,1,length=L)
coordinates=expand.grid(x,y)
train=sample(1:L^2,size=S)
A<-matrix(0,S,2)
A=coordinates[train,]
covariance_function=function(s1,s2,t1,t2){((sigm^2)/(a*(abs(t1-t2))^(2*alph)+1)^(taph))*exp(-c*(sqrt(sum((s1-s2)^2)))^(2*gamma)/(a*(abs(t1-t2))^(2*alph)+1)^(beta*gamma))}
X_matrix=matrix(0,S*M,3)
X_matrix[,3] = rep(T,each=S)
X_matrix[,1] = rep(A[,1],times=M)
X_matrix[,2] = rep(A[,2],times=M)
Covariance_Matrix=matrix(0,S*M,S*M)
for(i in 1:(M*S)){
for(j in i:(M*S)){
Covariance_Matrix[i,j]=covariance_function(X_matrix[i,1:2],X_matrix[j,1:2],X_matrix[i,3],X_matrix[j,3])
Covariance_Matrix[j,i]=Covariance_Matrix[i,j]
}}
#results<-data.frame(0,0,0)
#colnames(results)=c("Test1","Test2","Test2_all")
#for(i in 1:reps){
X_data=mvrnorm(n=N,mu=rep(0,S*M),Sigma=Covariance_Matrix)
X_array<-array(0,dim=c(M,S,N))
for(n in 1:N){
X_array[,,n]=t(matrix(X_data[n,],nrow=S,ncol=M))
}
DATA3 = X_array; loc = A;
tmp<-spatial_change_test(X_array,A,.85,'all',100)
source("Simpson.R"); source("Fast_ST.R"); source("Inline.R"); source("Inline_L2.R"); source("Auxiliary_Func.R")
setwd("~/Desktop/CurrentProjects/2012_GrKoRe/Matt_RPackage")
source("Simpson.R"); source("Fast_ST.R"); source("Inline.R"); source("Inline_L2.R"); source("Auxiliary_Func.R")
devtools::use_rcpp()
library(devtools)
devtools::use_rcpp()
setwd("~/Desktop/CurrentProjects/2012_GrKoRe/Matt_RPackage/scpt")
setwd("~/Desktop/CurrentProjects/2012_GrKoRe/Matt_RPackage/scpt")
devtools::use_rcpp()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
?inline
?cxxfunction
library(inline)
?cxxfunction
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
devtools::use_rcpp()
roxygen2::roxygenise()
roxygen2::roxygenise()
setwd("~/Desktop/CurrentProjects/2012_GrKoRe/Matt_RPackage/scpt")
setwd("~/Desktop/CurrentProjects/2012_GrKoRe/Matt_RPackage/scpt")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(scpt)
library(scpt)
library(scpt)
?cxxfunction
library(scpt)
library(scpt)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(scpt)
roxygen2::roxygenise()
library(scpt)
devtools::use_rcpp()
library(scpt)
library(RcppArmadillo)
devtools::load_all()
RcppArmadillo.package.skeleton("test")
setwd("~/Desktop/CurrentProjects/2012_GrKoRe/Matt_RPackage/scpt/test")
load_all()
library(devtools)
load_all()
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
rm(list=ls()); gc()
library(scpt)
library(MASS)
N=100 #sample size
M=50 #Time points
S=11 #Space points
T=seq(0,1,length=M)
reps<-10
gamma=1 #gamma belongs to (0,1]
alph=1/2  #alph belongs to (0,1]
sigm=1    # sigm^2 > 0
beta=0 # beta belongs to [0,1], for beta=0 we have separable covariance
c=1   # nonnegative scaling parameter of space
a=1   # nonnegative scaling parameter of time
taph=1 # beta*d/2 >= 0
#Generate the location points in the square with equal distance
L=1+round(sqrt(S))
x=seq(0,1,length=L)
y=seq(0,1,length=L)
coordinates=expand.grid(x,y)
train=sample(1:L^2,size=S)
A<-matrix(0,S,2)
A=coordinates[train,]
covariance_function=function(s1,s2,t1,t2){((sigm^2)/(a*(abs(t1-t2))^(2*alph)+1)^(taph))*exp(-c*(sqrt(sum((s1-s2)^2)))^(2*gamma)/(a*(abs(t1-t2))^(2*alph)+1)^(beta*gamma))}
X_matrix=matrix(0,S*M,3)
X_matrix[,3] = rep(T,each=S)
X_matrix[,1] = rep(A[,1],times=M)
X_matrix[,2] = rep(A[,2],times=M)
Covariance_Matrix=matrix(0,S*M,S*M)
for(i in 1:(M*S)){
for(j in i:(M*S)){
Covariance_Matrix[i,j]=covariance_function(X_matrix[i,1:2],X_matrix[j,1:2],X_matrix[i,3],X_matrix[j,3])
Covariance_Matrix[j,i]=Covariance_Matrix[i,j]
}}
#results<-data.frame(0,0,0)
#colnames(results)=c("Test1","Test2","Test2_all")
#for(i in 1:reps){
X_data=mvrnorm(n=N,mu=rep(0,S*M),Sigma=Covariance_Matrix)
X_array<-array(0,dim=c(M,S,N))
for(n in 1:N){
X_array[,,n]=t(matrix(X_data[n,],nrow=S,ncol=M))
}
DATA3 = X_array; loc = A;
tmp<-spatial_change_test(X_array,A,.85,'all',100)
roxygen2::roxygenise()
library(scpt)
roxygen2::roxygenise()
library(scpt)
library(MASS)
N=100 #sample size
M=50 #Time points
S=11 #Space points
T=seq(0,1,length=M)
reps<-10
gamma=1 #gamma belongs to (0,1]
alph=1/2  #alph belongs to (0,1]
sigm=1    # sigm^2 > 0
beta=0 # beta belongs to [0,1], for beta=0 we have separable covariance
c=1   # nonnegative scaling parameter of space
a=1   # nonnegative scaling parameter of time
taph=1 # beta*d/2 >= 0
#Generate the location points in the square with equal distance
L=1+round(sqrt(S))
x=seq(0,1,length=L)
y=seq(0,1,length=L)
coordinates=expand.grid(x,y)
train=sample(1:L^2,size=S)
A<-matrix(0,S,2)
A=coordinates[train,]
covariance_function=function(s1,s2,t1,t2){((sigm^2)/(a*(abs(t1-t2))^(2*alph)+1)^(taph))*exp(-c*(sqrt(sum((s1-s2)^2)))^(2*gamma)/(a*(abs(t1-t2))^(2*alph)+1)^(beta*gamma))}
X_matrix=matrix(0,S*M,3)
X_matrix[,3] = rep(T,each=S)
X_matrix[,1] = rep(A[,1],times=M)
X_matrix[,2] = rep(A[,2],times=M)
Covariance_Matrix=matrix(0,S*M,S*M)
for(i in 1:(M*S)){
for(j in i:(M*S)){
Covariance_Matrix[i,j]=covariance_function(X_matrix[i,1:2],X_matrix[j,1:2],X_matrix[i,3],X_matrix[j,3])
Covariance_Matrix[j,i]=Covariance_Matrix[i,j]
}}
#results<-data.frame(0,0,0)
#colnames(results)=c("Test1","Test2","Test2_all")
#for(i in 1:reps){
X_data=mvrnorm(n=N,mu=rep(0,S*M),Sigma=Covariance_Matrix)
X_array<-array(0,dim=c(M,S,N))
for(n in 1:N){
X_array[,,n]=t(matrix(X_data[n,],nrow=S,ncol=M))
}
DATA3 = X_array; loc = A;
tmp<-spatial_change_test(X_array,A,.85,'all',100)
roxygen2::roxygenise()
library(scpt)
library(scpt)
library(MASS)
N=100 #sample size
M=50 #Time points
S=11 #Space points
T=seq(0,1,length=M)
reps<-10
gamma=1 #gamma belongs to (0,1]
alph=1/2  #alph belongs to (0,1]
sigm=1    # sigm^2 > 0
beta=0 # beta belongs to [0,1], for beta=0 we have separable covariance
c=1   # nonnegative scaling parameter of space
a=1   # nonnegative scaling parameter of time
taph=1 # beta*d/2 >= 0
#Generate the location points in the square with equal distance
L=1+round(sqrt(S))
x=seq(0,1,length=L)
y=seq(0,1,length=L)
coordinates=expand.grid(x,y)
train=sample(1:L^2,size=S)
A<-matrix(0,S,2)
A=coordinates[train,]
covariance_function=function(s1,s2,t1,t2){((sigm^2)/(a*(abs(t1-t2))^(2*alph)+1)^(taph))*exp(-c*(sqrt(sum((s1-s2)^2)))^(2*gamma)/(a*(abs(t1-t2))^(2*alph)+1)^(beta*gamma))}
X_matrix=matrix(0,S*M,3)
X_matrix[,3] = rep(T,each=S)
X_matrix[,1] = rep(A[,1],times=M)
X_matrix[,2] = rep(A[,2],times=M)
Covariance_Matrix=matrix(0,S*M,S*M)
for(i in 1:(M*S)){
for(j in i:(M*S)){
Covariance_Matrix[i,j]=covariance_function(X_matrix[i,1:2],X_matrix[j,1:2],X_matrix[i,3],X_matrix[j,3])
Covariance_Matrix[j,i]=Covariance_Matrix[i,j]
}}
#results<-data.frame(0,0,0)
#colnames(results)=c("Test1","Test2","Test2_all")
#for(i in 1:reps){
X_data=mvrnorm(n=N,mu=rep(0,S*M),Sigma=Covariance_Matrix)
X_array<-array(0,dim=c(M,S,N))
for(n in 1:N){
X_array[,,n]=t(matrix(X_data[n,],nrow=S,ncol=M))
}
DATA3 = X_array; loc = A;
tmp<-spatial_change_test(X_array,A,.85,'all',100)
library(scpt)
library(scpt)
library(MASS)
N=100 #sample size
M=50 #Time points
S=11 #Space points
T=seq(0,1,length=M)
reps<-10
gamma=1 #gamma belongs to (0,1]
alph=1/2  #alph belongs to (0,1]
sigm=1    # sigm^2 > 0
beta=0 # beta belongs to [0,1], for beta=0 we have separable covariance
c=1   # nonnegative scaling parameter of space
a=1   # nonnegative scaling parameter of time
taph=1 # beta*d/2 >= 0
#Generate the location points in the square with equal distance
L=1+round(sqrt(S))
x=seq(0,1,length=L)
y=seq(0,1,length=L)
coordinates=expand.grid(x,y)
train=sample(1:L^2,size=S)
A<-matrix(0,S,2)
A=coordinates[train,]
covariance_function=function(s1,s2,t1,t2){((sigm^2)/(a*(abs(t1-t2))^(2*alph)+1)^(taph))*exp(-c*(sqrt(sum((s1-s2)^2)))^(2*gamma)/(a*(abs(t1-t2))^(2*alph)+1)^(beta*gamma))}
X_matrix=matrix(0,S*M,3)
X_matrix[,3] = rep(T,each=S)
X_matrix[,1] = rep(A[,1],times=M)
X_matrix[,2] = rep(A[,2],times=M)
Covariance_Matrix=matrix(0,S*M,S*M)
for(i in 1:(M*S)){
for(j in i:(M*S)){
Covariance_Matrix[i,j]=covariance_function(X_matrix[i,1:2],X_matrix[j,1:2],X_matrix[i,3],X_matrix[j,3])
Covariance_Matrix[j,i]=Covariance_Matrix[i,j]
}}
#results<-data.frame(0,0,0)
#colnames(results)=c("Test1","Test2","Test2_all")
#for(i in 1:reps){
X_data=mvrnorm(n=N,mu=rep(0,S*M),Sigma=Covariance_Matrix)
X_array<-array(0,dim=c(M,S,N))
for(n in 1:N){
X_array[,,n]=t(matrix(X_data[n,],nrow=S,ncol=M))
}
DATA3 = X_array; loc = A;
?.Call
#require(parallel); require(RcppArmadillo); require(splines); require(inline)
#source("Simpson.R"); source("Fast_ST.R"); source("Inline.R"); source("Inline_L2.R"); source("Auxiliary_Func.R")
L_per_curve<-dim(DATA3)[1]
N<-dim(DATA3)[2] # number of spatial locations
NY<-dim(DATA3)[3] # number of curves per location
L<-L_per_curve*NY # total temporal observations
DATA.DIFF3<-DATA3[,,2:NY]-DATA3[,,1:(NY-1)]
c.hat.pr <- .Call('get_svar',PACKAGE='scpt',as.matrix(loc*pi/180), DATA.DIFF3, dim(DATA.DIFF3))
library(devtools)
library(scpt)
tmp<-spatial_change_test(X_array,A,.85,'all',100)
library(scpt)
tmp<-spatial_change_test(X_array,A,.85,'all',100)
library(scpt)
tmp<-spatial_change_test(X_array,A,.85,'all',100)
tmp
library(scpt)
library(devtools)
library(scpt)
rm(list=ls()); gc()
library(MASS)
library(scpt)
N=100 #sample size
M=50 #Time points
S=11 #Space points
T=seq(0,1,length=M)
reps<-10
gamma=1 #gamma belongs to (0,1]
alph=1/2  #alph belongs to (0,1]
sigm=1    # sigm^2 > 0
beta=0 # beta belongs to [0,1], for beta=0 we have separable covariance
c=1   # nonnegative scaling parameter of space
a=1   # nonnegative scaling parameter of time
taph=1 # beta*d/2 >= 0
#Generate the location points in the square with equal distance
L=1+round(sqrt(S))
x=seq(0,1,length=L)
y=seq(0,1,length=L)
coordinates=expand.grid(x,y)
train=sample(1:L^2,size=S)
A<-matrix(0,S,2)
A=coordinates[train,]
covariance_function=function(s1,s2,t1,t2){((sigm^2)/(a*(abs(t1-t2))^(2*alph)+1)^(taph))*exp(-c*(sqrt(sum((s1-s2)^2)))^(2*gamma)/(a*(abs(t1-t2))^(2*alph)+1)^(beta*gamma))}
X_matrix=matrix(0,S*M,3)
X_matrix[,3] = rep(T,each=S)
X_matrix[,1] = rep(A[,1],times=M)
X_matrix[,2] = rep(A[,2],times=M)
Covariance_Matrix=matrix(0,S*M,S*M)
for(i in 1:(M*S)){
for(j in i:(M*S)){
Covariance_Matrix[i,j]=covariance_function(X_matrix[i,1:2],X_matrix[j,1:2],X_matrix[i,3],X_matrix[j,3])
Covariance_Matrix[j,i]=Covariance_Matrix[i,j]
}}
#results<-data.frame(0,0,0)
#colnames(results)=c("Test1","Test2","Test2_all")
#for(i in 1:reps){
X_data=mvrnorm(n=N,mu=rep(0,S*M),Sigma=Covariance_Matrix)
X_array<-array(0,dim=c(M,S,N))
for(n in 1:N){
X_array[,,n]=t(matrix(X_data[n,],nrow=S,ncol=M))
}
DATA3 = X_array; loc = A;
tmp<-spatial_change_test(X_array,A,.85,'all',100)
#results[i,]<-c(tmp)}
tmp
library(xtools)
library(devtools)
library(roxygen2)
?oxygenize
?roxygenize
roxygen2::roxygenize()
roxygen2::roxygenise()
library(scpt)
roxygen2::roxygenise()
library(scpt)
roxygen2::roxygenise()
library(scpt)
roxygen2::roxygenise()
library(scpt)
roxygen2::roxygenise()
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
install.packages("Rcpp")
install.packages("RcppArmadillo")
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
check --as-cran
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
library(scpt)
